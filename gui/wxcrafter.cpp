//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("&File"));
    
    m_menuItemFileNew = new wxMenuItem(m_menuFile, wxID_NEW, _("&New\tCtrl+N"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileNew);
    
    m_menuItemFileOpen = new wxMenuItem(m_menuFile, wxID_OPEN, _("&Open...\tCtrl+O"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileOpen);
    
    m_menuItemFileSave = new wxMenuItem(m_menuFile, wxID_SAVE, _("&Save\tCtrl+S"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileSave);
    
    m_menuItemFileSaveAs = new wxMenuItem(m_menuFile, wxID_SAVEAS, _("Save &As...\tCtrl+Shift+S"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileSaveAs);
    
    m_menuFile->AppendSeparator();
    
    m_menuFileRecent = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuFileRecent, _("Recent"));
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, _("&Exit\tCtrl+Q"), _("Quit"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("&View"));
    
    m_menuItemViewReset = new wxMenuItem(m_menuView, wxID_ANY, _("Reset"), wxT(""), wxITEM_NORMAL);
    m_menuView->Append(m_menuItemViewReset);
    
    m_menuView->AppendSeparator();
    
    m_menuItemViewLog = new wxMenuItem(m_menuView, wxID_ANY, _("Log"), _("Show or hide log"), wxITEM_CHECK);
    m_menuView->Append(m_menuItemViewLog);
    m_menuItemViewLog->Check();
    
    m_menuItemViewCode = new wxMenuItem(m_menuView, wxID_ANY, _("Code"), _("Show or hide simulation code"), wxITEM_CHECK);
    m_menuView->Append(m_menuItemViewCode);
    m_menuItemViewCode->Check();
    
    m_menuSimulation = new wxMenu();
    m_menuBar->Append(m_menuSimulation, _("&Simulation"));
    
    m_menuItemSimulationStart = new wxMenuItem(m_menuSimulation, ID_START, _("&Start\tF5"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationStart);
    
    m_menuItemSimulationPause = new wxMenuItem(m_menuSimulation, ID_PAUSE, _("&Pause\tF6"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationPause);
    
    m_menuItemSimulationStep = new wxMenuItem(m_menuSimulation, ID_STEP, _("S&tep\tF7"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationStep);
    
    m_menuItemSimulationRestart = new wxMenuItem(m_menuSimulation, ID_RESTART, _("&Restart\tF8"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationRestart);
    
    m_menuSimulation->AppendSeparator();
    
    m_menuItemSimulationScreenshot = new wxMenuItem(m_menuSimulation, wxID_ANY, _("Screenshot"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationScreenshot);
    
    m_menuHelp = new wxMenu();
    m_menuBar->Append(m_menuHelp, _("&Help"));
    
    m_menuItemHelpPlugins = new wxMenuItem(m_menuHelp, wxID_ANY, _("Plugins..."), _("Show a list of available plugins"), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelpPlugins);
    
    m_menuHelp->AppendSeparator();
    
    m_menuItemAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, _("&About..."), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemAbout);
    
    m_mainToolbar = this->CreateToolBar(wxTB_TEXT|wxTB_HORIZONTAL|wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(24,24));
    
    m_mainToolbar->AddTool(ID_START, _("Start"), wxXmlResource::Get()->LoadBitmap(wxT("play-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_PAUSE, _("Pause"), wxXmlResource::Get()->LoadBitmap(wxT("stop-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_STEP, _("Step"), wxXmlResource::Get()->LoadBitmap(wxT("step-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_RESTART, _("Restart"), wxXmlResource::Get()->LoadBitmap(wxT("restart-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    m_mainToolbar->Realize();
    
    wxBoxSizer* boxSizerMain = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(boxSizerMain);
    
    m_splitterMain = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxSP_3D);
    m_splitterMain->SetSashGravity(0.8);
    m_splitterMain->SetMinimumPaneSize(10);
    
    boxSizerMain->Add(m_splitterMain, 1, wxEXPAND, 5);
    
    m_splitterPageTop = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* boxSizerTop = new wxBoxSizer(wxVERTICAL);
    m_splitterPageTop->SetSizer(boxSizerTop);
    
    m_splitterTop = new wxSplitterWindow(m_splitterPageTop, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxSP_3D);
    m_splitterTop->SetSashGravity(0.8);
    m_splitterTop->SetMinimumPaneSize(10);
    
    boxSizerTop->Add(m_splitterTop, 1, wxLEFT|wxRIGHT|wxEXPAND, 5);
    
    m_splitterPageView = new wxPanel(m_splitterTop, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* boxSizerView = new wxBoxSizer(wxVERTICAL);
    m_splitterPageView->SetSizer(boxSizerView);
    
    int *m_glCanvasViewAttr = NULL;
    m_glCanvasView = new CanvasWidget(m_splitterPageView, wxID_ANY, m_glCanvasViewAttr, wxDefaultPosition, wxSize(-1,-1), wxFULL_REPAINT_ON_RESIZE);
    wxDELETEA( m_glCanvasViewAttr );
    
    boxSizerView->Add(m_glCanvasView, 1, wxEXPAND, 5);
    
    m_splitterPageCode = new wxPanel(m_splitterTop, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_splitterTop->SplitVertically(m_splitterPageView, m_splitterPageCode, 0);
    
    wxBoxSizer* boxSizerCode = new wxBoxSizer(wxVERTICAL);
    m_splitterPageCode->SetSizer(boxSizerCode);
    
    m_stcCode = new wxStyledTextCtrl(m_splitterPageCode, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), 0);
    // Configure the fold margin
    m_stcCode->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcCode->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcCode->SetMarginSensitive(4, true);
    m_stcCode->SetMarginWidth    (4, 16);
    
    m_stcCode->SetProperty(wxT("fold"),wxT("1"));
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_ARROW);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_BACKGROUND);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_BACKGROUND);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_ARROW);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    m_stcCode->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    m_stcCode->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcCode->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcCode->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcCode->SetMarginWidth(2, 0);
    m_stcCode->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcCode_PixelWidth = 4 + 5 *m_stcCode->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcCode->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcCode->SetMarginWidth(0,m_stcCode_PixelWidth);
    
    // Configure the line symbol margin
    m_stcCode->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcCode->SetMarginMask(3, 0);
    m_stcCode->SetMarginWidth(3,0);
    // Select the lexer
    m_stcCode->SetLexer(wxSTC_LEX_XML);
    // Set default font / styles
    m_stcCode->StyleClearAll();
    m_stcCode->SetWrapMode(0);
    m_stcCode->SetIndentationGuides(0);
    m_stcCode->SetKeyWords(0, wxT(""));
    m_stcCode->SetKeyWords(1, wxT(""));
    m_stcCode->SetKeyWords(2, wxT(""));
    m_stcCode->SetKeyWords(3, wxT(""));
    m_stcCode->SetKeyWords(4, wxT(""));
    
    boxSizerCode->Add(m_stcCode, 1, wxEXPAND, 5);
    
    m_splitterPageBottom = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_splitterMain->SplitHorizontally(m_splitterPageTop, m_splitterPageBottom, 0);
    
    wxBoxSizer* boxSizerBottom = new wxBoxSizer(wxVERTICAL);
    m_splitterPageBottom->SetSizer(boxSizerBottom);
    
    m_textCtrlLog = new wxTextCtrl(m_splitterPageBottom, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY|wxTE_MULTILINE);
    
    boxSizerBottom->Add(m_textCtrlLog, 1, wxLEFT|wxRIGHT|wxEXPAND, 5);
    
    m_statusBar = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE);
    m_statusBar->SetFieldsCount(2);
    this->SetStatusBar(m_statusBar);
    
    SetName(wxT("MainFrameBaseClass"));
    SetSizeHints(800,600);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
    // Connect events
    this->Connect(m_menuItemFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileNew), NULL, this);
    this->Connect(m_menuItemFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileOpen), NULL, this);
    this->Connect(m_menuItemFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSave), NULL, this);
    this->Connect(m_menuItemFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSaveAs), NULL, this);
    this->Connect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileExit), NULL, this);
    this->Connect(m_menuItemViewReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewReset), NULL, this);
    this->Connect(m_menuItemViewLog->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewLogCheck), NULL, this);
    this->Connect(m_menuItemViewLog->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnViewLogChecked), NULL, this);
    this->Connect(m_menuItemViewCode->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewCodeCheck), NULL, this);
    this->Connect(m_menuItemViewCode->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnViewCodeChecked), NULL, this);
    this->Connect(m_menuItemSimulationStart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Connect(m_menuItemSimulationStart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationPause->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationPause->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationPause), NULL, this);
    this->Connect(m_menuItemSimulationStep->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Connect(m_menuItemSimulationStep->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationRestart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    this->Connect(m_menuItemSimulationRestart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationScreenshot->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationScreenshot), NULL, this);
    this->Connect(m_menuItemHelpPlugins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpPlugins), NULL, this);
    this->Connect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpAbout), NULL, this);
    this->Connect(ID_START, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Connect(ID_PAUSE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationPause), NULL, this);
    this->Connect(ID_STEP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Connect(ID_RESTART, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    m_stcCode->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnCodeUpdateUi), NULL, this);
    m_stcCode->Connect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBaseClass::OnCodeChange), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItemFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileNew), NULL, this);
    this->Disconnect(m_menuItemFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileOpen), NULL, this);
    this->Disconnect(m_menuItemFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSave), NULL, this);
    this->Disconnect(m_menuItemFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSaveAs), NULL, this);
    this->Disconnect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileExit), NULL, this);
    this->Disconnect(m_menuItemViewReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewReset), NULL, this);
    this->Disconnect(m_menuItemViewLog->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewLogCheck), NULL, this);
    this->Disconnect(m_menuItemViewLog->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnViewLogChecked), NULL, this);
    this->Disconnect(m_menuItemViewCode->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewCodeCheck), NULL, this);
    this->Disconnect(m_menuItemViewCode->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnViewCodeChecked), NULL, this);
    this->Disconnect(m_menuItemSimulationStart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Disconnect(m_menuItemSimulationStart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationPause->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationPause->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationPause), NULL, this);
    this->Disconnect(m_menuItemSimulationStep->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Disconnect(m_menuItemSimulationStep->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationRestart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    this->Disconnect(m_menuItemSimulationRestart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationScreenshot->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationScreenshot), NULL, this);
    this->Disconnect(m_menuItemHelpPlugins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpPlugins), NULL, this);
    this->Disconnect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpAbout), NULL, this);
    this->Disconnect(ID_START, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Disconnect(ID_PAUSE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationPause), NULL, this);
    this->Disconnect(ID_STEP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Disconnect(ID_RESTART, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    m_stcCode->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnCodeUpdateUi), NULL, this);
    m_stcCode->Disconnect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBaseClass::OnCodeChange), NULL, this);
    
}

AboutDialogBaseClass::AboutDialogBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerMain);
    
    m_panelContent = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(300,-1), wxTAB_TRAVERSAL);
    m_panelContent->SetBackgroundColour(wxColour(wxT("rgb(255,255,255)")));
    
    boxSizerMain->Add(m_panelContent, 1, wxEXPAND, 5);
    
    wxBoxSizer* boxSizerContent = new wxBoxSizer(wxVERTICAL);
    m_panelContent->SetSizer(boxSizerContent);
    
    m_staticBitmapHeader = new wxStaticBitmap(m_panelContent, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("logo")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    boxSizerContent->Add(m_staticBitmapHeader, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxBoxSizer* boxSizerInfo = new wxBoxSizer(wxVERTICAL);
    
    boxSizerContent->Add(boxSizerInfo, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 10);
    
    m_staticTextAppName = new wxStaticText(m_panelContent, wxID_ANY, _("AppName"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticTextAppName->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    wxFont m_staticTextAppNameFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Noto Sans"));
    m_staticTextAppName->SetFont(m_staticTextAppNameFont);
    
    boxSizerInfo->Add(m_staticTextAppName, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextVersion = new wxStaticText(m_panelContent, wxID_ANY, _("Version"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticTextVersion->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    
    boxSizerInfo->Add(m_staticTextVersion, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 5);
    
    m_staticTextBuild = new wxStaticText(m_panelContent, wxID_ANY, _("Build"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticTextBuild->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    
    boxSizerInfo->Add(m_staticTextBuild, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextCopyright = new wxStaticText(m_panelContent, wxID_ANY, _("Copyright"), wxDefaultPosition, wxSize(-1,-1), wxFULL_REPAINT_ON_RESIZE);
    
    boxSizerInfo->Add(m_staticTextCopyright, 0, wxALL|wxEXPAND, 5);
    
    m_hyperLinkWeb = new wxHyperlinkCtrl(m_panelContent, wxID_ANY, _("ccy.zcu.cz"), wxT("http://ccy.zcu.cz"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    m_hyperLinkWeb->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLinkWeb->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLinkWeb->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    boxSizerInfo->Add(m_hyperLinkWeb, 0, wxLEFT|wxRIGHT|wxEXPAND|wxALIGN_LEFT, 5);
    m_panelContent->SetMinSize(wxSize(300,-1));
    
    m_staticLineSeparator = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLI_HORIZONTAL);
    
    boxSizerMain->Add(m_staticLineSeparator, 0, wxALL|wxEXPAND, 0);
    
    m_stdBtnSizerButtons = new wxStdDialogButtonSizer();
    
    boxSizerMain->Add(m_stdBtnSizerButtons, 0, wxALL|wxEXPAND, 5);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizerButtons->AddButton(m_buttonOk);
    m_stdBtnSizerButtons->Realize();
    
    SetName(wxT("AboutDialogBaseClass"));
    SetSizeHints(300,400);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
}

AboutDialogBaseClass::~AboutDialogBaseClass()
{
}

PluginsDialogBase::PluginsDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerMain);
    
    m_staticTextPath = new wxStaticText(this, wxID_ANY, _("Path"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerMain->Add(m_staticTextPath, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 5);
    
    wxArrayString m_listBoxPluginsArr;
    m_listBoxPlugins = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_listBoxPluginsArr, wxLB_SINGLE);
    
    boxSizerMain->Add(m_listBoxPlugins, 1, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizerMain = new wxStdDialogButtonSizer();
    
    boxSizerMain->Add(m_stdBtnSizerMain, 0, wxALL|wxEXPAND, 5);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizerMain->AddButton(m_buttonOk);
    m_stdBtnSizerMain->Realize();
    
    SetName(wxT("PluginsDialogBase"));
    SetMinSize( wxSize(300,100) );
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(PluginsDialogBase::OnInitDialog), NULL, this);
    
}

PluginsDialogBase::~PluginsDialogBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(PluginsDialogBase::OnInitDialog), NULL, this);
    
}
