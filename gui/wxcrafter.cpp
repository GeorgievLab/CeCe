//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("&File"));
    
    m_menuItemFileNew = new wxMenuItem(m_menuFile, wxID_NEW, _("&New\tCtrl+N"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileNew);
    
    m_menuItemFileOpen = new wxMenuItem(m_menuFile, wxID_OPEN, _("&Open...\tCtrl+O"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileOpen);
    
    m_menuItemFileSave = new wxMenuItem(m_menuFile, wxID_SAVE, _("&Save\tCtrl+S"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileSave);
    
    m_menuItemFileSaveAs = new wxMenuItem(m_menuFile, wxID_SAVEAS, _("Save &As...\tCtrl+Shift+S"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileSaveAs);
    
    m_menuFile->AppendSeparator();
    
    m_menuFileRecent = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuFileRecent, _("Recent"));
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, _("&Exit\tCtrl+Q"), _("Quit"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFileExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("&View"));
    
    m_menuItemTop = new wxMenuItem(m_menuView, wxID_ANY, _("Top\tF1"), wxT(""), wxITEM_RADIO);
    m_menuView->Append(m_menuItemTop);
    
    m_menuItemIsometric = new wxMenuItem(m_menuView, wxID_ANY, _("Isometric\tF2"), wxT(""), wxITEM_RADIO);
    m_menuView->Append(m_menuItemIsometric);
    
    m_menuSimulation = new wxMenu();
    m_menuBar->Append(m_menuSimulation, _("&Simulation"));
    
    m_menuItemSimulationStart = new wxMenuItem(m_menuSimulation, ID_START, _("&Start\tF5"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationStart);
    
    m_menuItemSimulationStop = new wxMenuItem(m_menuSimulation, ID_STOP, _("Sto&p\tF6"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationStop);
    
    m_menuItemSimulationStep = new wxMenuItem(m_menuSimulation, ID_STEP, _("S&tep\tF7"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationStep);
    
    m_menuItemSimulationRestart = new wxMenuItem(m_menuSimulation, ID_RESTART, _("&Restart\tF8"), wxT(""), wxITEM_NORMAL);
    m_menuSimulation->Append(m_menuItemSimulationRestart);
    
    m_menuHelp = new wxMenu();
    m_menuBar->Append(m_menuHelp, _("&Help"));
    
    m_menuItemAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, _("&About..."), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemAbout);
    
    m_mainToolbar = this->CreateToolBar(wxTB_TEXT|wxTB_HORIZONTAL|wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(24,24));
    
    m_mainToolbar->AddTool(ID_START, _("Start"), wxXmlResource::Get()->LoadBitmap(wxT("play-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_STOP, _("Stop"), wxXmlResource::Get()->LoadBitmap(wxT("stop-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_STEP, _("Step"), wxXmlResource::Get()->LoadBitmap(wxT("step-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_mainToolbar->AddTool(ID_RESTART, _("Restart"), wxXmlResource::Get()->LoadBitmap(wxT("restart-24")), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    m_mainToolbar->Realize();
    
    wxBoxSizer* boxSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerMain);
    
    m_splitterMain = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxSP_3D);
    m_splitterMain->SetSashGravity(0.6);
    m_splitterMain->SetMinimumPaneSize(100);
    
    boxSizerMain->Add(m_splitterMain, 1, wxALL|wxEXPAND, 5);
    
    m_splitterPageView = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* boxSizerView = new wxBoxSizer(wxVERTICAL);
    m_splitterPageView->SetSizer(boxSizerView);
    
    int *m_glCanvasViewAttr = NULL;
    m_glCanvasView = new CanvasWidget(m_splitterPageView, wxID_ANY, m_glCanvasViewAttr, wxDefaultPosition, wxSize(-1,-1), wxFULL_REPAINT_ON_RESIZE);
    wxDELETEA( m_glCanvasViewAttr );
    
    boxSizerView->Add(m_glCanvasView, 1, wxALL|wxEXPAND, 5);
    
    m_splitterPageSource = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_splitterMain->SplitVertically(m_splitterPageView, m_splitterPageSource, 100);
    
    wxBoxSizer* boxSizerSource = new wxBoxSizer(wxVERTICAL);
    m_splitterPageSource->SetSizer(boxSizerSource);
    
    m_stcSource = new wxStyledTextCtrl(m_splitterPageSource, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), 0);
    wxFont m_stcSourceFont = wxSystemSettings::GetFont(wxSYS_SYSTEM_FIXED_FONT);
    m_stcSource->SetFont(m_stcSourceFont);
    // Configure the fold margin
    m_stcSource->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcSource->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcSource->SetMarginSensitive(4, true);
    m_stcSource->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcSource->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcSource->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcSource->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcSource->SetMarginWidth(2, 0);
    m_stcSource->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcSource_PixelWidth = 4 + 5 *m_stcSource->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcSource->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcSource->SetMarginWidth(0,m_stcSource_PixelWidth);
    
    // Configure the line symbol margin
    m_stcSource->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcSource->SetMarginMask(3, 0);
    m_stcSource->SetMarginWidth(3,0);
    // Select the lexer
    m_stcSource->SetLexer(wxSTC_LEX_CPP);
    // Set default font / styles
    m_stcSource->StyleClearAll();
    for(int i=0; i<wxSTC_STYLE_MAX; ++i) {
        m_stcSource->StyleSetFont(i, m_stcSourceFont);
    }
    m_stcSource->SetWrapMode(0);
    m_stcSource->SetIndentationGuides(0);
    m_stcSource->SetKeyWords(0, wxT(""));
    m_stcSource->SetKeyWords(1, wxT(""));
    m_stcSource->SetKeyWords(2, wxT(""));
    m_stcSource->SetKeyWords(3, wxT(""));
    m_stcSource->SetKeyWords(4, wxT(""));
    
    boxSizerSource->Add(m_stcSource, 1, wxALL|wxEXPAND, 5);
    
    m_statusBar = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE);
    m_statusBar->SetFieldsCount(1);
    this->SetStatusBar(m_statusBar);
    
    SetSizeHints(800,600);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(m_menuItemFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileNew), NULL, this);
    this->Connect(m_menuItemFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileOpen), NULL, this);
    this->Connect(m_menuItemFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSave), NULL, this);
    this->Connect(m_menuItemFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSaveAs), NULL, this);
    this->Connect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItemTop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewTop), NULL, this);
    this->Connect(m_menuItemIsometric->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewIsometric), NULL, this);
    this->Connect(m_menuItemSimulationStart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Connect(m_menuItemSimulationStart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationStop->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationStop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStop), NULL, this);
    this->Connect(m_menuItemSimulationStep->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Connect(m_menuItemSimulationStep->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemSimulationRestart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    this->Connect(m_menuItemSimulationRestart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Connect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Connect(ID_STEP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Connect(ID_RESTART, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItemFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileNew), NULL, this);
    this->Disconnect(m_menuItemFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileOpen), NULL, this);
    this->Disconnect(m_menuItemFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSave), NULL, this);
    this->Disconnect(m_menuItemFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnFileSaveAs), NULL, this);
    this->Disconnect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItemTop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewTop), NULL, this);
    this->Disconnect(m_menuItemIsometric->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnViewIsometric), NULL, this);
    this->Disconnect(m_menuItemSimulationStart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStart), NULL, this);
    this->Disconnect(m_menuItemSimulationStart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationStop->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationStop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStop), NULL, this);
    this->Disconnect(m_menuItemSimulationStep->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Disconnect(m_menuItemSimulationStep->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemSimulationRestart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    this->Disconnect(m_menuItemSimulationRestart->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MainFrameBaseClass::OnSimulationNotRunningUpdateUi), NULL, this);
    this->Disconnect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Disconnect(ID_STEP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationStep), NULL, this);
    this->Disconnect(ID_RESTART, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSimulationRestart), NULL, this);
    
}
